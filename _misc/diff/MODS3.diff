Only in pp-1.6.4: AUTHORS
Only in pp-1.6.4: CHANGELOG
Only in pp-1.6.4: COPYING
Only in pp-1.6.4: MANIFEST.in
Only in pp-1.6.4: PKG-INFO
Only in pp-1.6.4: README
Only in pp-1.6.4: doc
Only in pp-1.6.4: examples
diff pp-1.6.4/pp.py ppft/python3/pp.py
41,42c41,63
< import user
< import cPickle as pickle
---
> try:
>     import user
> except ImportError:
>     user = types  # using as a stub
> try:
>     import dill as pickle
>     from dill.source import importable
>     from dill.source import getname
>     from dill.source import _wrap
> except ImportError:
>     try: import cPickle as pickle
>     except ImportError: import pickle
>     def importable(func): # the original code
>         #get lines of the source and adjust indent
>         sourcelines = inspect.getsourcelines(func)[0]
>         #remove indentation from the first line
>         sourcelines[0] = sourcelines[0].lstrip()
>         return "".join(sourcelines)
>     def getname(obj): # just get __name__
>         return obj.__name__
>     def _wrap(f): # do nothing
>         return f
> import six
45c66
< import ppcommon
---
> import ppcommon as ppc
48c69
< version = "1.6.4"
---
> __version__ = version = "1.6.4.7"
68a90,91
> 
> 
118c141
<         self.result, sout = pickle.loads(self.sresult)
---
>         self.result, sout = pickle.loads(ppc.b_(self.sresult))
121c144
<             print sout,
---
>             six.print_(sout, end=' ')
149a173,174
>        #open('/tmp/pp.debug', 'a+').write('Starting _Worker\n')
>        #open('/tmp/pp.debug', 'a+').write('receiving... \n')
150a176,177
>        #open('/tmp/pp.debug', 'a+').write('received: %s\n' % self.pid)
>        #open('/tmp/pp.debug', 'a+').write('sending: %s\n' % self.pickle_proto)
151a179
>        #open('/tmp/pp.debug', 'a+').write('...sent \n')
197a226
>        #open('/tmp/pp.debug', 'a+').write('connect: %s\n' % repr(message))
201a231
>                #open('/tmp/pp.debug', 'a+').write('connected: %s\n' % self.port)
205a236
>                #open('/tmp/pp.debug', 'a+').write('authenticated \n')
207a239
>                    #open('/tmp/pp.debug', 'a+').write('sent: %s\n' % repr(message))
352c384
<                 port = Server.default_port
---
>                 port = ppc.randomport()
364c396
<             if not isinstance(secret, types.StringType):
---
>             if not isinstance(secret, str):
369c401
<             if not isinstance(secret, types.StringType):
---
>             if not isinstance(secret, str):
418c450
<             if not isinstance(module, types.StringType):
---
>             if not isinstance(module, str):
422a455
>         other_type = types.FunctionType if six.PY3 else types.ClassType
430c463
<                         or isinstance(object1, types.ClassType):
---
>                         or isinstance(object1, other_type):
440,441c473,476
<         if isinstance(func, types.MethodType) and func.im_self is not None:
<             args = (func.im_self, ) + args
---
>         if isinstance(func, types.MethodType):
>             func_self = func.__self__ if six.PY3 else func.im_self
>             if func_self is not None:
>                 args = (func_self, ) + args
443c478
<         # if there is an instance of a user deined class in the arguments add
---
>         # if there is an instance of a user defined class in the arguments add
447,448c482,486
<             if isinstance(arg, types.InstanceType) \
<                     or str(type(arg))[:6] == "<class":
---
>             if (six.PY2 and isinstance(arg, types.InstanceType)) \
>                         or str(type(arg))[:6] == "<class":
>                 # in PY3, all instances are <class... so skip the builtins
>                 if getattr(inspect.getmodule(arg), '__name__', None) \
>                    in ['builtins', '__builtin__', None]: pass
450,451c488,489
<                 if ppcommon.is_not_imported(arg, modules):
<                     depfuncs += tuple(ppcommon.get_class_hierarchy(arg.__class__))
---
>                 elif ppc.is_not_imported(arg, modules):
>                     depfuncs += tuple(ppc.get_class_hierarchy(arg.__class__))
467c505
<                 (tid, func.func_name))
---
>                 (tid, getname(func)))
534c572
<         print "Job execution statistics:"
---
>         print("Job execution statistics:")
536c574
<         statistics = self.get_stats().items()
---
>         statistics = list(self.get_stats().items())
540,541c578,579
<         print " job count | % of all jobs | job time sum | " \
<                 "time per job | job server"
---
>         print(" job count | % of all jobs | job time sum | " \
>                 "time per job | job server")
544c582
<                 print "    %6i |        %6.2f |     %8.4f |  %11.6f | %s" \
---
>                 print("    %6i |        %6.2f |     %8.4f |  %11.6f | %s" \
546,548c584,587
<                         stat.time/stat.njobs, ppserver, )
<         print "Time elapsed since server creation", walltime
<         print self.__active_tasks, "active tasks,", self.get_ncpus(), "cores"
---
>                         stat.time/stat.njobs, ppserver, ))
>         print("Time elapsed since server creation %s" % walltime)
>         print("%s active tasks, %s cores" % (self.__active_tasks, \
>                                                self.get_ncpus()))
551,553c590,592
<             print "WARNING: statistics provided above is not accurate" \
<                   " due to job rescheduling"
<         print
---
>             print("WARNING: statistics provided above is not accurate" \
>                   " due to job rescheduling")
>         print("")
579a619
>            #open('/tmp/pp.debug', 'a+').write('_RWorker(STAT)\n')
581a622
>            #open('/tmp/pp.debug', 'a+').write('_RWorker: %s\n' % ncpus)
584a626
>                #open('/tmp/pp.debug', 'a+').write('_RWorker(EXEC)\n')
590a633
>                #open('/tmp/pp.debug', 'a+').write('_RWorker(EXEC)_\n')
595a639
>            #open('/tmp/pp.debug', 'a+').write('_RWorker(sched)\n')
606c650
<             ppcommon.start_thread("connect1",  self.connect1, ppserver)
---
>             ppc.start_thread("connect1",  self.connect1, ppserver)
610c654
<             ppcommon.start_thread("discover.run", self.discover.run, ppserver)
---
>             ppc.start_thread("discover.run", self.discover.run, ppserver)
637a682
>             # should probably just 'try' above, if fail rely on dill.dumps
639c684
<                     (funcs[0].func_name, sources, modules),
---
>                     (getname(funcs[0]), sources, modules),
672c717
<                     ppcommon.start_thread("run_local",  self._run_local, task+(worker, ))
---
>                     ppc.start_thread("run_local",  self._run_local, task+(worker, ))
681c726
<                         ppcommon.start_thread("run_remote",  self._run_remote, task+(rworker, ))
---
>                         ppc.start_thread("run_remote",  self._run_remote, task+(rworker, ))
690c735
<                                 ppcommon.start_thread("run_remote",  self._run_remote, task+(rworker, ))                                
---
>                                 ppc.start_thread("run_remote",  self._run_remote, task+(rworker, ))                                
703,707c748
<             #get lines of the source and adjust indent
<             sourcelines = inspect.getsourcelines(func)[0]
<             #remove indentation from the first line
<             sourcelines[0] = sourcelines[0].lstrip()
<             self.__sourcesHM[hashf] = "".join(sourcelines)
---
>             self.__sourcesHM[hashf] = importable(func)
719a761
>            #open('/tmp/pp.debug', 'a+').write('_local: %s\n' % repr(sfunc))
720a763
>            #open('/tmp/pp.debug', 'a+').write('_local: %s\n' % repr(sargs))
721a765
>            #open('/tmp/pp.debug', 'a+').write('_local: \n')
722a767
>            #open('/tmp/pp.debug', 'a+').write('_local: %s\n' % repr(sresult))
723a769
>            #open('/tmp/pp.debug', 'a+').write('_local: _\n')
748a795
>            #open('/tmp/pp.debug', 'a+').write('_remote: %s\n' % repr(sfunc))
749a797
>            #open('/tmp/pp.debug', 'a+').write('_remote: %s\n' % repr(sargs))
750a799
>            #open('/tmp/pp.debug', 'a+').write('_remote: %s\n')
751a801
>            #open('/tmp/pp.debug', 'a+').write('_remote: %s\n' % repr(sresult))
753a804
>            #open('/tmp/pp.debug', 'a+').write('_remote: _%s\n')
diff pp-1.6.4/ppauto.py ppft/python3/ppauto.py
37c37
< import ppcommon
---
> import ppcommon as ppc
40c40
< version = "1.6.4"
---
> __version__ = version = "1.6.4.7"
72c72
<             self.bsocket.sendto("C", self.broadcast_addr)
---
>             self.bsocket.sendto(ppc.b_("C"), self.broadcast_addr)
79c79
<                 self.bsocket.sendto("S", self.broadcast_addr)
---
>                 self.bsocket.sendto(ppc.b_("S"), self.broadcast_addr)
92c92
<         ppcommon.start_thread("broadcast",  self.broadcast)
---
>         ppc.start_thread("broadcast",  self.broadcast)
98a99
>                 message = ppc.str_(message)
106c107
<                     ppcommon.start_thread("ppauto_connect1",  self.base.connect1,
---
>                     ppc.start_thread("ppauto_connect1",  self.base.connect1,
110c111
<                     self.bsocket.sendto("S", self.broadcast_addr)
---
>                     self.bsocket.sendto(ppc.b_("S"), self.broadcast_addr)
diff pp-1.6.4/ppcommon.py ppft/python3/ppcommon.py
33a34,62
> try: # workaround for install process
>     import six
> except ImportError:
>     import types
>     import sys
>     six = types.ModuleType('six')
>     six.PY3 = sys.version_info[0] == 3
>     six.b = lambda x:x
> if six.PY3:
>     long = int
>     import io
>     file = io.IOBase
>     def str_(byte): # convert to unicode
>         if not hasattr(byte, 'decode'): return byte
>         try:
>             return byte.decode('ascii')
>         except UnicodeDecodeError: # non-ascii needs special handling
>             return repr([i for i in byte])+'{B}'
>     def b_(string):
>         if not hasattr(string, 'encode'): return string
>         if not string.endswith(']{B}'): return six.b(string)
>         return bytes(eval(string[:-3])) # special handling for non-ascii
> else:
>     long = long
>     file = file
>     def str_(string): # is already str
>         return string
>     def b_(string):
>         return six.b(string)
36c65
< version = "1.6.4"
---
> __version__ = version = "1.6.4.7"
62a92,144
> 
> class portnumber(object):
>     '''port selector
> 
> Usage:
>     >>> pick = portnumber(min=1024,max=65535)
>     >>> print( pick() )
>     '''
> 
>     def __init__(self, min=0, max=64*1024):
>         '''select a port number from a given range.
> 
> The first call will return a random number from the available range,
> and each subsequent call will return the next number in the range.
> 
> Inputs:
>     min -- minimum port number  [default = 0]
>     max -- maximum port number  [default = 65536]
>         '''
>         self.min = min
>         self.max = max
>         self.first = -1
>         self.current = -1
>         return
> 
>     def __call__(self):
>         import random
>         
>         if self.current < 0: #first call
>             self.current = random.randint(self.min, self.max)
>             self.first = self.current
>             return self.current
>         else:
>             self.current += 1
>             
>             if self.current > self.max:
>                 self.current = self.min
>             if self.current == self.first: 
>                 raise RuntimeError( 'Range exhausted' )
>             return self.current
>         return
> 
> 
> def randomport(min=1024, max=65536):
>     '''select a random port number
> 
> Inputs:
>     min -- minimum port number  [default = 1024]
>     max -- maximum port number  [default = 65536]
>     '''
>     return portnumber(min, max)()
> 
> 
diff pp-1.6.4/ppserver.py ppft/python3/ppserver.py
32a33
> from __future__ import with_statement
45a47
> import six
49c51
< import ppcommon
---
> import ppcommon as ppc
53c55
< version = "1.6.4"
---
> __version__ = version = "1.6.4.7"
77c79
<             print >>pfile, os.getpid()
---
>             six.print_(os.getpid(), file=pfile)
84c86
<             self.port = self.default_port
---
>             self.port = ppc.randomport()
95c97
<             ppcommon.start_thread("timeout_check",  self.check_timeout)
---
>             ppc.start_thread("timeout_check",  self.check_timeout)
127c129,130
<         except socket.error, e:
---
>         except socket.error:
>             e = sys.exc_info()[1]
139c142,143
<                 except socket.error as e: 
---
>                 except socket.error: 
>                     e = sys.exc_info()[1]
147c151
<                     ppcommon.start_thread("client_socket",  self.crun, (csocket,  ))
---
>                     ppc.start_thread("client_socket",  self.crun, (csocket,  ))
163c167
<                 for i in xrange(16)])
---
>                 for i in range(16)])
165,166c169,170
<         answer = sha_new(srandom+self.secret).hexdigest()
<         clientanswer = mysocket.receive()
---
>         answer = sha_new(ppc.b_(srandom+self.secret)).hexdigest()
>         clientanswer = ppc.str_(mysocket.receive())
176c180
<         ctype = mysocket.receive()
---
>         ctype = ppc.str_(mysocket.receive())
182a187
>                #open('/tmp/pp.debug', 'a+').write('STAT: \n')
183a189
>                #open('/tmp/pp.debug', 'a+').write('STAT: get_ncpus\n')
185a192
>                    #open('/tmp/pp.debug', 'a+').write('STAT: recvd\n')
186a194
>                    #open('/tmp/pp.debug', 'a+').write('STAT: _\n')
188a197
>                    #open('/tmp/pp.debug', 'a+').write('EXEC: \n')
189a199
>                    #open('/tmp/pp.debug', 'a+').write('EXEC: '+repr((sfunc,))+'\n')
190a201
>                    #open('/tmp/pp.debug', 'a+').write('EXEC: '+repr((sargs,))+'\n')
192a204
>                    #open('/tmp/pp.debug', 'a+').write('EXEC: '+repr((sresult,))+'\n')
193a206
>                    #open('/tmp/pp.debug', 'a+').write('EXEC: _\n')
206c219
<         ppcommon.start_thread("server_broadcast",  discover.run,
---
>         ppc.start_thread("server_broadcast",  discover.run,
217,219c230,234
<     except ImportError, ie:
<         print >> sys.stderr, ("ERROR: You must have config obj installed to use"
<                 "configuration files. You can still use command line switches.")
---
>     except ImportError:
>         ie = sys.exc_info()[1]
>        #sysstderr = getattr(sys.stderr, 'buffer', sys.stderr)
>         six.print_(("ERROR: You must have config obj installed to use"
>                 "configuration files. You can still use command line switches."), file=sys.stderr)
223c238
<         print >> sys.stderr, "ERROR: Can not access %s." % arg
---
>         six.print_("ERROR: Can not access %s." % arg, file=sys.stderr)
296,297c311,312
<     print "Parallel Python Network Server (pp-" + version + ")"
<     print "Usage: ppserver.py [-hdar] [-f format] [-n proto]"\
---
>     print("Parallel Python Network Server (pp-" + version + ")")
>     print("Usage: ppserver.py [-hdar] [-f format] [-n proto]"\
300,328c315,343
<             " [-k seconds] [-P pid_file]"
<     print
<     print "Options: "
<     print "-h                 : this help message"
<     print "-d                 : set log level to debug"
<     print "-f format          : log format"
<     print "-a                 : enable auto-discovery service"
<     print "-r                 : restart worker process after each"\
<             " task completion"
<     print "-n proto           : protocol number for pickle module"
<     print "-c path            : path to config file"
<     print "-i interface       : interface to listen"
<     print "-b broadcast       : broadcast address for auto-discovery service"
<     print "-p port            : port to listen"
<     print "-w nworkers        : number of workers to start"
<     print "-s secret          : secret for authentication"
<     print "-t seconds         : timeout to exit if no connections with "\
<             "clients exist"
<     print "-k seconds         : socket timeout in seconds"
<     print "-P pid_file        : file to write PID to"
<     print
<     print "To print server stats send SIGUSR1 to its main process (unix only). "
<     print 
<     print "Due to the security concerns always use a non-trivial secret key."
<     print "Secret key set by -s switch will override secret key assigned by"
<     print "pp_secret variable in .pythonrc.py"
<     print
<     print "Please visit http://www.parallelpython.com for extended up-to-date"
<     print "documentation, examples and support forums"
---
>             " [-k seconds] [-P pid_file]")
>     print("")
>     print("Options: ")
>     print("-h                 : this help message")
>     print("-d                 : set log level to debug")
>     print("-f format          : log format")
>     print("-a                 : enable auto-discovery service")
>     print("-r                 : restart worker process after each"\
>             " task completion")
>     print("-n proto           : protocol number for pickle module")
>     print("-c path            : path to config file")
>     print("-i interface       : interface to listen")
>     print("-b broadcast       : broadcast address for auto-discovery service")
>     print("-p port            : port to listen")
>     print("-w nworkers        : number of workers to start")
>     print("-s secret          : secret for authentication")
>     print("-t seconds         : timeout to exit if no connections with "\
>             "clients exist")
>     print("-k seconds         : socket timeout in seconds")
>     print("-P pid_file        : file to write PID to")
>     print("")
>     print("To print server stats send SIGUSR1 to its main process (unix only). ")
>     print("")
>     print("Due to the security concerns always use a non-trivial secret key.")
>     print("Secret key set by -s switch will override secret key assigned by")
>     print("pp_secret variable in .pythonrc.py")
>     print("")
>     print("Please visit http://www.parallelpython.com for extended up-to-date")
>     print("documentation, examples and support forums")
diff pp-1.6.4/pptransport.py ppft/python3/pptransport.py
37c37
< import types
---
> import six
40c40
< version = "1.6.4"
---
> __version__ = version = "1.6.4.7"
43c43
< # compartibility with Python 2.6
---
> # compatibility with Python 2.6
53a54
> import ppcommon as ppc
66c67
<         remote_version = self.receive()
---
>         remote_version = ppc.str_(self.receive())
72c73,74
<         srandom = self.receive()
---
>         srandom = ppc.b_(self.receive())
>         secret = ppc.b_(secret)
75,76c77,78
<         response = self.receive()
<         if response == "OK":
---
>         response = ppc.b_(self.receive())
>         if response == ppc.b_("OK"):
94c96
<         return md5_new(msg).hexdigest()
---
>         return md5_new(ppc.b_(msg)).hexdigest()
96a99,103
>        #if hasattr(self, 'w'):
>        #    open('/tmp/pp.debug', 'a+').write(repr(('cs', self.w, msg))+'\n')
>        #else:
>        #    open('/tmp/pp.debug', 'a+').write(repr(('cs', self.socket, msg))+'\n')
>         msg = ppc.b_(msg)
99c106
<             self.send("H" + hash1)
---
>             self.send(ppc.b_("H" + hash1))
101c108
<             self.send("N" + msg)
---
>             self.send(ppc.b_("N") + msg)
106,107c113,119
<         if msg[0] == 'H':
<             hash1 = msg[1:]
---
>        #if hasattr(self, 'r'):
>        #    open('/tmp/pp.debug', 'a+').write(repr(('cr',  self.r, msg))+'\n')
>        #else:
>        #    open('/tmp/pp.debug', 'a+').write(repr(('cr', self.socket, msg))+'\n')
>         msg = ppc.b_(msg)
>         if msg[:1] == ppc.b_('H'):
>             hash1 = ppc.str_(msg[1:])
111c123,124
<             self.rcache[hash1] = map(preprocess, (msg, ))[0]
---
>             if preprocess is None: preprocess = lambda x:x
>             self.rcache[hash1] = tuple(map(preprocess, (msg, )))[0]
117a131
>        #open('/tmp/pp.debug', 'a+').write(repr((r,w))+'\n')
120c134
<         if isinstance(r, types.FileType) and isinstance(w, types.FileType):
---
>         if isinstance(r, ppc.file) and isinstance(w, ppc.file):
125a140,152
>         if six.PY3 and hasattr(self.w, 'buffer'):
>             self.wb = self.w.buffer
>             self.has_wb = True
>         else:
>             self.wb = self.w
>             self.has_wb = False
>         if six.PY3 and hasattr(self.r, 'buffer'):
>             self.rb = self.r.buffer
>             self.has_rb = True
>         else:
>             self.rb = self.r
>             self.has_rb = False
>         
128,130c155,165
<         self.w.write(struct.pack("!Q", len(msg)))
<         self.w.flush()
<         self.w.write(msg)
---
>        #l = len(ppc.b_(msg)) if (self.has_wb or self.w.mode == 'wb') else len(ppc.str_(msg))
>        #open('/tmp/pp.debug', 'a+').write(repr(('s', l, self.w, msg))+'\n')
>         if self.has_wb or self.w.mode == 'wb':
>             msg = ppc.b_(msg)
>             self.wb.write(struct.pack("!Q", len(msg)))
>             self.w.flush()
>         else: #HACK: following may be > 8 bytes, needed for len(msg) >= 256
>             msg = ppc.str_(msg)
>             self.wb.write(ppc.str_(struct.pack("!Q", len(msg))))
>             self.w.flush()
>         self.wb.write(msg)
134c169,170
<         e_size = struct.calcsize("!Q")
---
>         e_size = struct.calcsize("!Q") # 8
>         c_size = struct.calcsize("!c") # 1
136c172,173
<         data = ""
---
>         stub = ppc.b_("") if (self.has_rb or self.r.mode == 'rb') else ""
>         data = stub
138,139c175,178
<             msg = self.r.read(e_size-r_size)
<             if msg == "":
---
>             msg = self.rb.read(e_size-r_size)
>            #l = len(msg)
>            #open('/tmp/pp.debug', 'a+').write(repr(('_r', l, self.r, msg))+'\n')
>             if msg == stub:
140a180,182
>             if stub == "" and msg.startswith('['): #HACK to get str_ length
>                 while not msg.endswith('{B}'):
>                     msg += self.rb.read(c_size)
143c185
<         e_size = struct.unpack("!Q", data)[0]
---
>         e_size = struct.unpack("!Q", ppc.b_(data))[0] # get size of msg
146c188
<         data = ""
---
>         data = stub
148,149c190,193
<             msg = self.r.read(e_size-r_size)
<             if msg == "":
---
>             msg = self.rb.read(e_size-r_size)
>            #l = len(msg)
>            #open('/tmp/pp.debug', 'a+').write(repr(('r_', l, self.r, msg))+'\n')
>             if msg == stub:
152a197
>         data = ppc.b_(data)
154c199,200
<         return map(preprocess, (data, ))[0]
---
>         if preprocess is None: preprocess = lambda x:x
>         return tuple(map(preprocess, (data, )))[0]
171a218,220
>        #l = len(ppc.b_(data))
>        #open('/tmp/pp.debug', 'a+').write(repr(('ss', l, self.socket, data))+'\n')
>         data = ppc.b_(data)
174c223
<         s_size = 0L
---
>         s_size = ppc.long(0)
182c231
<         s_size = 0L
---
>         s_size = ppc.long(0)
192c241,242
<         data = ""
---
>         stub = ppc.b_("")
>         data = stub
195c245,247
<             if msg == "":
---
>            #l = len(msg)
>            #open('/tmp/pp.debug', 'a+').write(repr(('_sr', l, self.socket, msg))+'\n')
>             if msg == stub:
199c251
<         e_size = struct.unpack("!Q", data)[0]
---
>         e_size = struct.unpack("!Q", ppc.b_(data))[0] # get size of msg
202c254
<         data = ""
---
>         data = stub
205c257,259
<             if msg == "":
---
>            #l = len(msg)
>            #open('/tmp/pp.debug', 'a+').write(repr(('sr_', l, self.socket, msg))+'\n')
>             if msg == stub:
208a263
>         data = ppc.b_(data)
diff pp-1.6.4/ppworker.py ppft/python3/ppworker.py
34,35c34,46
< import StringIO
< import cPickle as pickle
---
> try:
>     import io
>     ioStringIO = io.StringIO
>    #ioStringIO = io.BytesIO
> except ImportError:
>     import StringIO as io
>     ioStringIO = io.StringIO
> try:
>     import dill as pickle
> except ImportError:
>     try: import cPickle as pickle
>     except ImportError: import pickle
> import six
36a48
> import ppcommon as ppc
39c51
< version = "1.6.4"
---
> __version__ = version = "1.6.4.7"
43c55
<     fname, fsources, imports = pickle.loads(msg)
---
>     fname, fsources, imports = pickle.loads(ppc.b_(msg))
49c61
<             exec module
---
>             six.exec_(module)
52c64
<             print "An error has occured during the module import"
---
>             print("An error has occured during the module import")
61c73
<         self.sout = StringIO.StringIO()
---
>         self.sout = ioStringIO()
65a78,79
>        #open('/tmp/pp.debug', 'a+').write('Starting _WorkerProcess\n')
>        #open('/tmp/pp.debug', 'a+').write('send... \n')
66a81,82
>        #open('/tmp/pp.debug', 'a+').write('send: %s\n' % str(os.getpid()))
>        #open('/tmp/pp.debug', 'a+').write('receive... \n')
67a84
>        #open('/tmp/pp.debug', 'a+').write('receive: %s\n' % self.pickle_proto)
79c96
<                         exec __fobj
---
>                         six.exec_(__fobj)
82,83c99,100
<                         print "An error has occured during the " + \
<                               "function import"
---
>                         print("An error has occured during the " + \
>                               "function import")
86c103
<                 __args = pickle.loads(__sargs)
---
>                 __args = pickle.loads(ppc.b_(__sargs))
88c105
<                 __f = locals()[__fname]
---
>                 __f = locals()[ppc.str_(__fname)]
92c109
<                     print "An error has occured during the function execution"
---
>                     print("An error has occured during the function execution")
102c119
<             print "A fatal error has occured during the function execution"
---
>             print("A fatal error has occured during the function execution")
Only in pp-1.6.4: setup.py
